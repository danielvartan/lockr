% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lock_file.R
\name{lock_file}
\alias{lock_file}
\alias{unlock_file}
\title{Encrypt/Decrypt a file using an RSA key pair}
\usage{
lock_file(
  file,
  public_key = "./inst/ssh/id_rsa.pub",
  suffix = ".lockr",
  remove_file = TRUE
)

unlock_file(
  file,
  private_key = "./inst/ssh/id_rsa",
  suffix = ".lockr",
  remove_file = TRUE,
  password = NULL
)
}
\arguments{
\item{file}{A string with the file path to be encrypted/decrypted. For
security reasons, encrypted files must end with the suffix parameter.}

\item{public_key}{(optional) an \code{\link[openssl:keygen]{opensssl}} RSA
public key or a string specifying the public key path. See \code{\link[=rsa_keygen]{rsa_keygen()}}
to learn how to create an RSA key pair (default:
\code{"./inst/ssh/id_rsa.pub"}).}

\item{suffix}{(optional) a string specifying the suffix to be added (when
encrypting)/removed (when decrypting) to/of the file. It must start with
\code{.} (default: \code{".lockr"}).}

\item{remove_file}{(optional) a \code{\link[=logical]{logical}} value indicating if
the original file must be removed after the encryption/decryption process
(default: \code{TRUE}).}

\item{private_key}{(optional) an \code{\link[openssl:keygen]{opensssl}} RSA
private key or a string specifying the private key path. See \code{\link[=rsa_keygen]{rsa_keygen()}}
to learn how to create an RSA key pair (default: \code{"./inst/ssh/id_rsa"}).}

\item{password}{(optional) only for protected keys. A string specifying
the password to read the private key. Avoid typing passwords on the
console, use \link[askpass:askpass]{askpass()} instead (default: \code{NULL}).}
}
\value{
An invisible string with the locked/unlocked file path.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#maturing}{\figure{lifecycle-maturing.svg}{options: alt='[Maturing]'}}}{\strong{[Maturing]}}

\code{lock_file()} and \code{unlock_file} can encrypt/decrypt any kind file using an
RSA key pair. If you project doesn't have an RSA key pair, you can use
\code{\link[=rsa_keygen]{rsa_keygen()}} to create one.

\code{lock_file()} and \code{unlock_file} use
\link[openssl:encrypt_envelope]{encrypt_envelope()} /
\link[openssl:encrypt_envelope]{decrypt_envelope()} to perform file
encryption/decryption. See those functions to learn more about the
encrypting/decrypting process.
}
\examples{
## Locking files

temp_dir <- tempfile("dir")
dir.create(temp_dir)
temp_file <- tempfile(tmpdir = temp_dir)
rsa_keygen(temp_dir)

con <- file(temp_file, "w+")
cat("Test", file = temp_file, sep = "\n")
list.files(temp_dir)
suppressWarnings(readLines(con))
close(con)

lock_file(temp_file, public_key = file.path(temp_dir, "id_rsa.pub"))

temp_file_locked <- paste0(temp_file, ".lockr")
con <- file(temp_file_locked, "rb")
list.files(temp_dir)
suppressWarnings(readLines(con))
close(con)

## Unlocking files

unlock_file(temp_file_locked, private_key = file.path(temp_dir, "id_rsa"))

list.files(temp_dir)
con <- file(temp_file, "r+")
readLines(con)
close(con)
}
\seealso{
Other lock/unlock functions: 
\code{\link{lock_dir}()}
}
\concept{lock/unlock functions}
